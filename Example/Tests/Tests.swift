import XCTest
import RealmSwift
@testable import com_awareframework_ios_sensor_significantmotion
import com_awareframework_ios_sensor_core

class Tests: XCTestCase {
    
    override func setUp() {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class.
        Realm.Configuration.defaultConfiguration.inMemoryIdentifier = self.name
    }
    
    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }
    
    func testObserver(){
        #if targetEnvironment(simulator)
        print("This test requires a real device.")
        
        #else
        
        class Observer:SignificantMotionObserver{
            weak var startExpectation: XCTestExpectation?
            weak var endExpectation: XCTestExpectation?

            func onSignificantMotionStart() {
                print("start")
                startExpectation?.fulfill()
            }

            func onSignificantMotionEnd() {
                endExpectation?.fulfill()
                print("end")
            }
            
        }
        
        let startObserverExpect = expectation(description: "start observer")
        let endObserverExpect = expectation(description: "end observer")
        let observer = Observer()
        observer.startExpectation = startObserverExpect
        observer.endExpectation = endObserverExpect
        let sensor = SignificantMotionSensor.init(SignificantMotionSensor.Config().apply{ config in
            config.sensorObserver = observer
        })
        // sensor.start()
        for data in sampleAccData {
            sensor.detectSignificantMotion(x: data[0], y: data[1], z: data[2])
        }
        
        wait(for: [startObserverExpect, endObserverExpect], timeout: 3)
        sensor.stop()
        
        #endif
        
    }
    
    func testControllers(){
        
        let sensor = SignificantMotionSensor.init(SignificantMotionSensor.Config().apply{ config in
            config.debug = true
            // config.dbType = .REALM
        })
        
        /// test set label action ///
        let expectSetLabel = expectation(description: "set label")
        let newLabel = "hello"
        let labelObserver = NotificationCenter.default.addObserver(forName: .actionAwareSignificantMotionSetLabel, object: nil, queue: .main) { (notification) in
            let dict = notification.userInfo;
            if let d = dict as? Dictionary<String,String>{
                XCTAssertEqual(d[SignificantMotionSensor.EXTRA_LABEL], newLabel)
            }else{
                XCTFail()
            }
            expectSetLabel.fulfill()
        }
        sensor.set(label:newLabel)
        wait(for: [expectSetLabel], timeout: 5)
        NotificationCenter.default.removeObserver(labelObserver)
        
        /// test sync action ////
        let expectSync = expectation(description: "sync")
        let syncObserver = NotificationCenter.default.addObserver(forName: Notification.Name.actionAwareSignificantMotionSync , object: nil, queue: .main) { (notification) in
            expectSync.fulfill()
            print("sync")
        }
        sensor.sync()
        wait(for: [expectSync], timeout: 5)
        NotificationCenter.default.removeObserver(syncObserver)
        
        
        #if targetEnvironment(simulator)
        
        print("Controller tests (start and stop) require a real device.")
        
        #else
        
        //// test start action ////
        let expectStart = expectation(description: "start")
        let observer = NotificationCenter.default.addObserver(forName: .actionAwareSignificantMotionStart,
                                                              object: nil,
                                                              queue: .main) { (notification) in
                                                                expectStart.fulfill()
                                                                print("start")
        }
        sensor.start()
        wait(for: [expectStart], timeout: 5)
        NotificationCenter.default.removeObserver(observer)
        
        
        /// test stop action ////
        let expectStop = expectation(description: "stop")
        let stopObserver = NotificationCenter.default.addObserver(forName: .actionAwareSignificantMotionStop, object: nil, queue: .main) { (notification) in
            expectStop.fulfill()
            print("stop")
        }
        sensor.stop()
        wait(for: [expectStop], timeout: 5)
        NotificationCenter.default.removeObserver(stopObserver)
        
        #endif
    }
    
    func testSignificantMotionData(){
        let data = SignificantMotionData()
        let dict = data.toDictionary()
        XCTAssertEqual(dict["moving"] as! Bool, false)
        
        data.moving = true
        let newDict = data.toDictionary()
         XCTAssertEqual(newDict["moving"] as! Bool, true)
    }
    
    
    func testSyncModule(){
        #if targetEnvironment(simulator)
        
        print("This test requires a real SignificantMotion.")
        
        #else
        // success //
        let sensor = SignificantMotionSensor.init(SignificantMotionSensor.Config().apply{ config in
            config.debug = true
            config.dbType = .REALM
            config.dbHost = "node.awareframework.com:1001"
            config.dbPath = "sync_db"
        })
        if let engine = sensor.dbEngine as? RealmEngine {
            engine.removeAll(SignificantMotionData.self)
            for _ in 0..<100 {
                engine.save(SignificantMotionData())
            }
        }
        let successExpectation = XCTestExpectation(description: "success sync")
        let observer = NotificationCenter.default.addObserver(forName: Notification.Name.actionAwareSignificantMotionSyncCompletion,
                                                              object: sensor, queue: .main) { (notification) in
                                                                if let userInfo = notification.userInfo{
                                                                    if let status = userInfo["status"] as? Bool {
                                                                        if status == true {
                                                                            successExpectation.fulfill()
                                                                        }
                                                                    }
                                                                }
        }
        sensor.sync(force: true)
        wait(for: [successExpectation], timeout: 20)
        NotificationCenter.default.removeObserver(observer)
        
        ////////////////////////////////////
        
        // failure //
        let sensor2 = SignificantMotionSensor.init(SignificantMotionSensor.Config().apply{ config in
            config.debug = true
            config.dbType = .REALM
            config.dbHost = "node.awareframework.com.com" // wrong url
            config.dbPath = "sync_db"
        })
        let failureExpectation = XCTestExpectation(description: "failure sync")
        let failureObserver = NotificationCenter.default.addObserver(forName: Notification.Name.actionAwareSignificantMotionSyncCompletion,
                                                                     object: sensor2, queue: .main) { (notification) in
                                                                        if let userInfo = notification.userInfo{
                                                                            if let status = userInfo["status"] as? Bool {
                                                                                if status == false {
                                                                                    failureExpectation.fulfill()
                                                                                }
                                                                            }
                                                                        }
        }
        if let engine = sensor2.dbEngine as? RealmEngine {
            engine.removeAll(SignificantMotionData.self)
            for _ in 0..<100 {
                engine.save(SignificantMotionData())
            }
        }
        sensor2.sync(force: true)
        wait(for: [failureExpectation], timeout: 20)
        NotificationCenter.default.removeObserver(failureObserver)
        
        #endif
    }

    
    let sampleAccData =
    [
        [0.01251220703125,-0.002349853515625,-0.9930419921875],
        [0.0088348388671875,-0.0014190673828125,-0.993896484375],
        [0.00823974609375,0.0015411376953125,-0.989593505859375],
        [0.0113525390625,-0.0008392333984375,-0.9922637939453125],
        [0.0126495361328125,-0.0021514892578125,-0.9908599853515625],
        [0.01226806640625,-0.001129150390625,-0.9942626953125],
        [0.0123748779296875,0.00146484375,-0.9909515380859375],
        [0.0107574462890625,-0.000579833984375,-0.9918212890625],
        [0.01055908203125,-0.0021514892578125,-0.993072509765625],
        [0.010528564453125,-0.003753662109375,-0.99444580078125],
        [0.012359619140625,9.1552734375e-05,-0.990478515625],
        [0.0127410888671875,0.0002899169921875,-0.990997314453125],
        [0.0104217529296875,0.0001068115234375,-0.991790771484375],
        [0.0104522705078125,-0.001129150390625,-0.9916839599609375],
        [0.0108184814453125,-0.0018310546875,-0.993743896484375],
        [0.0111236572265625,-0.003936767578125,-0.99383544921875],
        [0.0107421875,-0.000335693359375,-0.9922637939453125],
        [0.0117340087890625,-0.0011749267578125,-0.9931793212890625],
        [0.0123748779296875,-0.0041961669921875,-0.9952392578125],
        [0.0118560791015625,-0.002716064453125,-0.9944610595703125],
        [0.0106658935546875,-0.00103759765625,-0.9926605224609375],
        [0.0113677978515625,0.0006103515625,-0.9923858642578125],
        [0.0104827880859375,1.52587890625e-05,-0.9924468994140625],
        [0.011383056640625,-0.0005645751953125,-0.9908599853515625],
        [0.010955810546875,-0.0007171630859375,-0.992340087890625],
        [0.0113067626953125,-0.00274658203125,-0.9936370849609375],
        [0.0124359130859375,-0.0019378662109375,-0.9940338134765625],
        [0.0118255615234375,-0.0020599365234375,-0.993194580078125],
        [0.0110321044921875,-0.001708984375,-0.9943084716796875],
        [0.010345458984375,-0.0013580322265625,-0.9935455322265625],
        [0.0095977783203125,-0.0017547607421875,-0.9927520751953125],
        [0.01104736328125,-0.00140380859375,-0.9928741455078125],
        [0.0115814208984375,-0.000762939453125,-0.9934539794921875],
        [0.0119476318359375,-0.002777099609375,-0.9948883056640625],
        [0.0118255615234375,-0.0013427734375,-0.9933013916015625],
        [0.0117645263671875,-0.0020294189453125,-0.99334716796875],
        [0.0113677978515625,-0.00146484375,-0.994659423828125],
        [0.012115478515625,-0.002105712890625,-0.993682861328125],
        [0.011810302734375,-0.000274658203125,-0.994598388671875],
        [0.011322021484375,-0.001312255859375,-0.9940032958984375],
        [0.009979248046875,-0.000701904296875,-0.9925994873046875],
        [0.0106353759765625,-0.0011138916015625,-0.9941864013671875],
        [0.010650634765625,-0.002105712890625,-0.993865966796875],
        [0.0110015869140625,-0.0019989013671875,-0.994659423828125],
        [0.012542724609375,-0.002044677734375,-0.99456787109375],
        [0.0114898681640625,-0.0010833740234375,-0.9940643310546875],
        [0.01190185546875,-0.0025787353515625,-0.9931182861328125],
        [0.010528564453125,-0.001373291015625,-0.9942474365234375],
        [0.0109710693359375,-0.0008087158203125,-0.993499755859375],
        [0.010772705078125,-0.0005035400390625,-0.99365234375],
        [0.0109710693359375,-0.0015411376953125,-0.993621826171875],
        [0.0118255615234375,-0.00177001953125,-0.9937896728515625],
        [0.012054443359375,-0.00311279296875,-0.9945220947265625],
        [0.0108795166015625,-0.002349853515625,-0.995513916015625],
        [0.0112762451171875,-0.0012969970703125,-0.993743896484375],
        [0.0106964111328125,-3.0517578125e-05,-0.99420166015625],
        [0.0111083984375,-0.002166748046875,-0.9940185546875],
        [0.0110321044921875,-0.0010833740234375,-0.9954986572265625],
        [0.0107879638671875,-0.0003204345703125,-0.9942474365234375],
        [0.0109100341796875,-0.0005645751953125,-0.9934844970703125],
        [0.0111541748046875,-0.0001220703125,-0.99517822265625],
        [0.01177978515625,-0.002227783203125,-0.9944915771484375],
        [0.0117340087890625,-0.0028839111328125,-0.997406005859375],
        [0.010894775390625,-0.0025482177734375,-0.995880126953125],
        [0.01190185546875,-0.0004730224609375,-0.9939727783203125],
        [0.0123748779296875,-0.0002593994140625,-0.993377685546875],
        [0.0115814208984375,-0.0003814697265625,-0.9945526123046875],
        [0.010101318359375,-0.002105712890625,-0.995330810546875],
        [0.01025390625,-0.0057220458984375,-0.9955596923828125],
        [0.01116943359375,0.001007080078125,-0.9963226318359375],
        [0.01251220703125,-0.0011749267578125,-0.9933013916015625],
        [0.0135040283203125,-0.0021514892578125,-0.9939727783203125],
        [0.0111083984375,-0.0040130615234375,-0.99664306640625],
        [0.009490966796875,-0.005401611328125,-0.993133544921875],
        [0.0086669921875,0.00079345703125,-0.993438720703125],
        [0.01153564453125,-0.001678466796875,-0.994293212890625],
        [0.0143585205078125,0.0021209716796875,-0.9926605224609375],
        [0.012481689453125,-0.003143310546875,-0.995574951171875],
        [0.008819580078125,-0.00311279296875,-0.9960174560546875],
        [0.008575439453125,-0.0031280517578125,-0.994781494140625],
        [0.010772705078125,-0.000640869140625,-0.994140625],
        [0.013397216796875,-0.0006866455078125,-0.9938812255859375],
        [0.0140533447265625,-0.0032958984375,-0.99578857421875],
        [0.011749267578125,-0.0020904541015625,-0.99554443359375],
        [0.009552001953125,-0.00140380859375,-0.9953460693359375],
        [0.00836181640625,0.000701904296875,-0.99346923828125],
        [0.0129852294921875,0.0004425048828125,-0.994384765625],
        [0.01348876953125,-0.000396728515625,-0.994384765625],
        [0.0115509033203125,-0.0039215087890625,-0.9955596923828125],
        [0.0091400146484375,-0.0038299560546875,-0.995941162109375],
        [0.009674072265625,-0.0026092529296875,-0.9968414306640625],
        [0.01068115234375,-0.0006561279296875,-0.99273681640625],
        [0.0140380859375,-0.0002288818359375,-0.9943695068359375],
        [0.012786865234375,-0.00274658203125,-0.9957275390625],
        [0.0099334716796875,-0.0019989013671875,-0.994384765625],
        [0.0089263916015625,-0.0005340576171875,-0.9923553466796875],
        [0.0109405517578125,-0.0013275146484375,-0.9940338134765625],
        [0.0127716064453125,-0.0008697509765625,-0.9940948486328125],
        [0.01361083984375,-0.002197265625,-0.9945220947265625],
        [0.0120697021484375,-0.0035858154296875,-0.9955902099609375],
        [0.0104217529296875,-0.00152587890625,-0.994537353515625],
        [0.0113677978515625,4.57763671875e-05,-0.9936981201171875],
        [0.0106201171875,-0.0004425048828125,-0.9942626953125],
        [0.0123291015625,-0.0023345947265625,-0.9940185546875],
        [0.0102691650390625,-0.0021514892578125,-0.9932861328125],
        [0.0111541748046875,-0.000946044921875,-0.9944305419921875],
        [0.0095367431640625,-0.0010833740234375,-0.9944000244140625],
        [0.0117034912109375,0.00048828125,-0.99346923828125],
        [0.012603759765625,-0.00213623046875,-0.9951171875],
        [0.0128021240234375,-0.0029144287109375,-0.9957275390625],
        [0.011810302734375,-0.0021514892578125,-0.995697021484375],
        [0.0099334716796875,-0.0010223388671875,-0.99285888671875],
        [0.0106964111328125,0.0013580322265625,-0.9924163818359375],
        [0.011505126953125,-0.0013580322265625,-0.9928131103515625],
        [0.011260986328125,-0.0030517578125,-0.9956817626953125],
        [0.0111846923828125,-0.0030059814453125,-0.9946746826171875],
        [0.0110015869140625,-0.0012969970703125,-0.9940032958984375],
        [0.010345458984375,-0.000823974609375,-0.9928741455078125],
        [0.011138916015625,-0.0009765625,-0.99322509765625],
        [0.0115509033203125,-0.0022430419921875,-0.99261474609375],
        [0.0126800537109375,-0.00250244140625,-0.995269775390625],
        [0.010467529296875,0.0001220703125,-0.9927520751953125],
        [0.01025390625,0.000518798828125,-0.9925689697265625],
        [0.0095672607421875,-0.0004730224609375,-0.9937591552734375],
        [0.0120849609375,-0.0003814697265625,-0.9924163818359375],
        [0.0120086669921875,-0.002593994140625,-0.9952545166015625],
        [0.01153564453125,-0.00323486328125,-0.9938507080078125],
        [0.010650634765625,-0.00238037109375,-0.994384765625],
        [0.0104827880859375,-0.0006866455078125,-0.9931793212890625],
        [0.0112457275390625,0.0005035400390625,-0.9924163818359375],
        [0.0112457275390625,-9.1552734375e-05,-0.9926300048828125],
        [0.0120849609375,-0.0012359619140625,-0.994415283203125],
        [0.0109710693359375,-0.000946044921875,-0.9931488037109375],
        [0.0096588134765625,9.1552734375e-05,-0.9930572509765625],
        [0.010223388671875,-0.0008392333984375,-0.9940185546875],
        [0.01177978515625,-0.00262451171875,-0.9979248046875],
        [0.01318359375,-0.0054931640625,-0.999237060546875],
        [0.0148468017578125,-0.0081787109375,-0.9966583251953125],
        [0.0117034912109375,-0.002471923828125,-0.989898681640625],
        [0.009552001953125,0.004730224609375,-0.9913330078125],
        [0.0086669921875,0.0023040771484375,-0.9923248291015625],
        [0.0106964111328125,-0.0022125244140625,-0.9934844970703125],
        [0.01165771484375,-0.0039520263671875,-0.9947509765625],
        [0.0106353759765625,-0.0007476806640625,-0.9945220947265625],
        [0.0106658935546875,0.0014801025390625,-0.9919891357421875],
        [0.0096435546875,0.0024566650390625,-0.989501953125],
        [0.0105133056640625,-0.0013580322265625,-0.994293212890625],
        [0.0122222900390625,-0.006439208984375,-0.99639892578125],
        [0.0136871337890625,-0.005615234375,-0.9976959228515625],
        [0.013458251953125,0.00091552734375,-0.9939117431640625],
        [0.01019287109375,0.0041351318359375,-0.98883056640625],
        [0.008636474609375,0.003326416015625,-0.990875244140625],
        [0.01214599609375,-0.0001678466796875,-0.9928131103515625],
        [0.003662109375,-0.011505126953125,-1.001220703125],
        [0.0179290771484375,-0.001617431640625,-0.9931488037109375],
        [-0.1045074462890625,-0.0049591064453125,-0.9464111328125],
        [0.0268402099609375,0.0139617919921875,-0.9378662109375],
        [-0.00177001953125,-0.0077972412109375,-0.977386474609375],
        [0.00762939453125,-0.009796142578125,-1.0056304931640625],
        [0.0043487548828125,-0.0049591064453125,-1.01165771484375],
        [-0.4814453125,-0.1690521240234375,-0.9833221435546875],
        [-0.508209228515625,-0.18115234375,-0.9818572998046875],
        [-0.0020599365234375,0.0059051513671875,-0.9950408935546875],
        [1.3318939208984375,0.414215087890625,-1.028594970703125],
        [0.200225830078125,-0.082733154296875,-1.101287841796875],
        [-0.0616302490234375,0.218231201171875,-1.2807464599609375],
        [0.0200958251953125,0.1875762939453125,-0.90643310546875],
        [-0.0036773681640625,-0.258514404296875,-0.80975341796875],
        [-0.1722412109375,-0.113372802734375,-0.9408721923828125],
        [-0.2930908203125,-0.074676513671875,-1.076141357421875],
        [-0.56402587890625,-0.0617828369140625,-1.174407958984375],
        [-0.6253814697265625,0.5062713623046875,-1.1042938232421875],
        [-0.173980712890625,-0.2061614990234375,-1.1352386474609375],
        [0.1077423095703125,-0.5022735595703125,-1.0262451171875],
        [-0.1191558837890625,0.076934814453125,-1.214752197265625],
        [0.0517425537109375,0.0623321533203125,-0.663177490234375],
        [0.239349365234375,0.3251953125,-0.898895263671875],
        [-0.7147216796875,0.2152557373046875,-0.112945556640625],
        [0.19049072265625,0.1797332763671875,-0.7352752685546875],
        [-0.0122833251953125,0.3440093994140625,-1.115020751953125],
        [-0.2184600830078125,0.50579833984375,-1.650634765625],
        [-0.1733245849609375,0.3285064697265625,-2.102386474609375],
        [0.030853271484375,0.1796722412109375,-2.3356170654296875],
        [0.0568389892578125,1.284698486328125,-2.3575286865234375],
        [0.158233642578125,1.1584930419921875,-3.416015625],
        [0.5488433837890625,1.0179595947265625,-3.824249267578125],
        [0.6589508056640625,1.567108154296875,-3.3955841064453125],
        [0.6400909423828125,1.6017303466796875,-3.6106719970703125],
        [0.6390838623046875,1.866729736328125,-3.631805419921875],
        [0.7958984375,2.6352386474609375,-2.8218841552734375],
        [0.5094451904296875,3.3546142578125,-1.241363525390625],
        [0.1947174072265625,3.184814453125,-0.008544921875],
        [-0.06353759765625,2.60540771484375,0.6298675537109375],
        [-0.33203125,2.3774566650390625,1.0783843994140625],
        [-0.390838623046875,2.16424560546875,1.4366607666015625],
        [-0.316436767578125,1.8802947998046875,1.958404541015625],
        [-0.2079620361328125,1.6410369873046875,2.4123992919921875],
        [0.06103515625,1.40081787109375,2.6960906982421875],
        [0.255950927734375,1.2446746826171875,2.6369476318359375],
        [0.3397369384765625,1.1114654541015625,2.194091796875],
        [0.3025970458984375,0.98529052734375,1.37646484375],
        [0.108245849609375,0.7692108154296875,0.1864776611328125],
        [-0.0310821533203125,0.6673431396484375,-0.556488037109375],
        [0.142486572265625,0.1915435791015625,-1.6075897216796875],
        [-0.0063323974609375,-0.1555023193359375,-2.23016357421875],
        [-0.082855224609375,-0.553466796875,-2.4046478271484375],
        [-0.013946533203125,-0.6966400146484375,-2.1629638671875],
        [0.0028076171875,-0.787261962890625,-1.9084014892578125],
        [-0.0296173095703125,-0.50628662109375,-1.47607421875],
        [0.1638336181640625,-0.4783172607421875,-1.4275665283203125],
        [0.274627685546875,-0.6277923583984375,-1.595855712890625],
        [0.1346282958984375,-0.52471923828125,-1.5532073974609375],
        [0.0624542236328125,-0.4352874755859375,-1.299407958984375],
        [0.10906982421875,-0.304656982421875,-1.02447509765625],
        [0.1428070068359375,-0.3786773681640625,-1.172943115234375],
        [0.1444091796875,-0.332427978515625,-1.175872802734375],
        [0.163665771484375,-0.3017120361328125,-1.169891357421875],
        [0.0534210205078125,-0.240753173828125,-1.1342315673828125],
        [0.029266357421875,-0.15008544921875,-1.117401123046875],
        [0.116424560546875,-0.1758880615234375,-1.2090911865234375],
        [0.1714324951171875,-0.175933837890625,-1.3015594482421875],
        [0.143218994140625,-0.028839111328125,-1.2797393798828125],
        [0.1130523681640625,0.0701446533203125,-1.2106781005859375],
        [0.144805908203125,0.0101776123046875,-1.1457977294921875],
        [0.1558990478515625,0.0251922607421875,-1.1265869140625],
        [0.1121063232421875,0.0046234130859375,-1.178131103515625],
        [0.142059326171875,-0.0250091552734375,-1.1500396728515625],
        [0.0956573486328125,-0.037811279296875,-1.02960205078125],
        [0.085540771484375,0.013763427734375,-0.9768829345703125],
        [0.1055755615234375,-0.0006866455078125,-0.939208984375],
        [0.0776824951171875,-0.0331268310546875,-0.9241790771484375],
        [0.0113677978515625,-0.0502777099609375,-1.002593994140625],
        [0.0198822021484375,-0.0248870849609375,-1.02093505859375],
        [0.055877685546875,0.006439208984375,-1.0027313232421875],
        [0.1056365966796875,0.004364013671875,-0.9343109130859375],
        [0.0805206298828125,0.03607177734375,-0.8925628662109375],
        [0.05694580078125,0.021026611328125,-0.8652496337890625],
        [-0.0472259521484375,0.019439697265625,-1.4731597900390625],
        [0.0058135986328125,-0.2304840087890625,-1.703826904296875],
        [-0.0134124755859375,-0.1700592041015625,-0.9505462646484375],
        [-0.009735107421875,0.0638275146484375,-1.0323486328125],
        [0.000213623046875,-0.0706024169921875,-0.999267578125],
        [-0.0084228515625,-0.084808349609375,-0.9590911865234375],
        [0.0090484619140625,-0.094879150390625,-1.0064544677734375],
        [0.0112457275390625,-0.0846405029296875,-1.0015869140625],
        [0.0009307861328125,-0.0808868408203125,-0.9955596923828125],
        [0.01226806640625,-0.0762939453125,-0.977294921875],
        [0.019866943359375,-0.0798492431640625,-1.005615234375],
        [0.0162506103515625,-0.082305908203125,-0.991729736328125],
        [0.01226806640625,-0.0872344970703125,-0.9918060302734375],
        [0.0119171142578125,-0.0765838623046875,-0.98193359375],
        [0.010986328125,-0.070709228515625,-0.9849700927734375],
        [0.0135650634765625,-0.0717620849609375,-0.9950408935546875],
        [0.0152130126953125,-0.0824737548828125,-0.9925384521484375],
        [0.01275634765625,-0.0825042724609375,-0.9918975830078125],
        [0.00836181640625,-0.0741424560546875,-0.9854583740234375],
        [0.0078277587890625,-0.0688018798828125,-0.9867706298828125],
        [0.0111236572265625,-0.0718231201171875,-0.9888153076171875],
        [0.0113372802734375,-0.076629638671875,-1.002716064453125],
        [0.0078582763671875,-0.0781707763671875,-0.992706298828125],
        [0.0086212158203125,-0.0731658935546875,-0.998260498046875],
        [0.001312255859375,-0.0619354248046875,-1.008331298828125],
        [-0.0299530029296875,-0.05828857421875,-1.042205810546875],
        [-0.0018310546875,-0.0142974853515625,-1.1662139892578125],
        [-0.012725830078125,-0.0113525390625,-1.1606292724609375],
        [-0.1318206787109375,-0.0894622802734375,-1.081817626953125],
        [-0.1523590087890625,-0.15875244140625,-1.053558349609375],
        [-0.1388397216796875,-0.121002197265625,-0.9849700927734375],
        [-0.0754241943359375,-0.009765625,-0.96533203125],
        [-0.0294342041015625,0.0254058837890625,-0.984588623046875]
    ]
}
